#!/usr/bin/python
#
# Filename : ec2-backup.py
# Author   : Kun Yao
#            Dainong Ma
#            Zhe Wang

import sys, getopt, os, commands
#======================
#global attributes
#======================

EC2_INSTANCE_ID = "i-8495d9d5"  #instance id generated
EC2_HOST = "\0" #instance public DNS is generated
KEYPAIR_LOCATION = "\0" #keypair for login instance needed from yaokun
SECURITY_GROUP = "\0" #securty group for running instance needed from yaokun
AMI_ID = "\0" # needed or default
INSTANCE_LOGIN_USR = "ec2-user" #generated or default
MOUNT_DEV_LOCATION = "/dev/sdb" #default or create by us all
MOUNT_DIR_LOCATION = "/mnt/data-store" # create by us all
SOURCE_DIR = "\0" # the dir needed to backup
SOURCE_DIR_SIZE = 0 #the dir size needed by yaokun
VOLUME_SIZE = 0 #calculated by wangzhe
VOLUME_ID = "\0" #given by usr or generated by def createvolume
AVA_ZONE="us-east-1a" # if the colume id is given, need to know this form volume id, if not, we define it same for create instance
VERBOSE = 0



#=======================
#Print the usage message
#=======================
def usage():
    print 'Usage:'
    print '  ec2-backup [-h] [-m method] [-v volume-id] dir'
    sys.exit()

#================================
#Check the validlity of directory
#
# @param dir_ given directory
# @return bool dir exists or not
#================================
def checkdir(dir_):
    return os.path.exists(full_path(dir_))

#===============================
#try to convert given directory into abs dir
#
# @param dir_ given directory
# @return string abslute path
#===============================
def full_path(dir_):
    if dir_[0] == '~' and not os.path.exists(dir_):
        dir_ = os.path.expanduser(dir_)
    return os.path.abspath(dir_)

#==============================
#Size of giving dirctory
# @param  string start dirctory
# @return int    total number of bytes of giving dir
#==============================
def getdirsize(start_dir = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_dir):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size
#===============================
#TODO: Create EC2 instance and 
#        set up connection
#===============================
def lanuchec2():
    commandhead =  'aws ec2 run-instances '
    key =          ' --key ec2backup-keypair '
    group =        ' --security-groups ec2backup-security-group '
    instancetype = ' --instance-type t1.micro '
    imageid =      ' --image-id ami-2f726546 '
    grepinsID =    ' | grep InstanceId '
    flags = os.environ.get('EC2_BACKUP_FLAGS_AWS')
    sshflags = os.environ.get('EC2_BACKUP_FLAGS_SSH')
    AMI_ID = 'ami-2f726546'
    
    #parse aws flags
    if(flags != None):
        try:
            opts, args = getopt.getopt(flags.split(),"i:",["instance-type="])
        except getopt.GetoptError:
            usage()
        for opt,arg in opts:
            if opt == '-i':
                key = '--key '+ arg
            elif opt == '--instance-type':
                instancetype = '--instance-type '+arg
        if(len(args)>=1):
            print "Error: unknow option detected in $EC2_BACKUP_FLAGS_AWS:", args
    
    #TODO:parse ssh flags

    #key and group gen
    KEYPAIR_LOCATION = keygen()
    SECURITY_GROUP = securitygroupgen()

    #run ec2
    ec2command = commandhead + key + group + instancetype + imageid + grepinsID
    out = commands.getstatusoutput(ec2command)
    INSTANCE_ID = out[1][-13:-3]
    print out,INDTANCE_ID
    #TODO: check running
    sleep(30)
    #statecheckcommand = '''aws ec2 describe-instances --instance-ids '''+\ 
    #                    INSTANCE_ID + ''' | grep State'''
    #out = commands.getstatusoutput(statecheckcommand)
    fatchDNScommand = '''aws ec2 describe-instances --instance-ids'''+\
                        INSTANCE_ID + ''' | grep PublicDnsName'''
    out = commands.getstatusoutput(fatchDNScommand)
    EC2_HOST = out[1][38:-3]
    print 'EC2_HOST',EC2_HOST

       
#========================
#TODO: Key pair gen SSH FLAGS HANDLE
# Defult key name: ec2backup-keypair
#=======================
def keygen():
    checkcommand = '''aws ec2 describe-key-pairs | grep '"KeyName": "ec2backup-keypair",'|wc -l'''
    out = commands.getstatusoutput(checkcommand)
    print out
    if(out[1] == '0'):#no key exist
        genkeycommand = '''aws ec2 create-key-pair --key-name ec2backup-keypair --query 'KeyMaterial' --output text > ~/.ssh/ec2backup-keypair.pem && chmod 600 ~/.ssh/ec2backup-keypair.pem''' 
        out = commands.getstatusoutput(genkeycommand)
        print out
    return '~/.ssh/ec2backup-keypair.pem'

#=======================
#Delete key
#TODO: handle key name del local key
#======================
def delkey(keyname = 'ec2backup-keypair'):
    deletekeycommand = '''aws ec2 delete-key-pair --key-name ec2backup-keypair'''
    out = commands.getstatusoutput(deletekeycommand)
    print out


#=======================
#TODO:security group gen
#Default security group name: ec2backup-security-group
#=======================
def securitygroupgen():
    checkcommand = '''aws ec2 describe-security-groups | grep '"GroupName": "ec2backup-security-group",'| wc -l '''
    out = commands.getstatusoutput(checkcommand)
    if (out[1] == '0'):#no group exist
        gensecuritycommand = '''aws ec2 create-security-group --group-name ec2backup-security-group --description "My ec2backup-security-group"'''
        addrulecommand = '''aws ec2 authorize-security-group-ingress --group-name ec2backup-security-group --protocol tcp --port 22 --cidr 0.0.0.0/0'''
        out = commands.getstatusoutput(gensecuritycommand)
        print out
        out = commands.getstatusoutput(addrulecommand)
        print out
    return 'ec2backup-security-group'

#==============================
#TODO: use 'dd' or 'rsync' backup
#==============================
def dobackup(method):
   if (method == 'dd')
       command = "tar -zcvf  %s_backup.tar.gz %s"%(SOURCE_DIR,SOURCE_DIR)
       output = commands.getstatusoutput(command)
       command =" dd if=%s_backup.tar.gz | ssh -i %s %s@%s \" dd of=&s/backup.tar.gz\""%(SOURCE_DIR,KEYPAIR_LOCATION,INSTANCE_LOGIN_USR,EC2_HOST,MOUNT_DIR_LOCATION)
       output = commands.getstatusoutput(command)
       command = "rm -rf %s_backup.tar.gz"%(SOURCE_DIR)
       output = commands.getstatusoutput(command)
   else
       command = "rsync -e \"ssh -i %s\" -az %s %s@%s:%s/ >out.txt"%($KEYPAIR_LOCATION, $SOURCE_DIR, $INSTANCE_LOGIN_USR, $EC2_HOST, $MOUNT_DIR_LOCATION)

#================================
# create volume and output the
#  volumeid
#================================

def createvolumes():
    commands="aws ec2 create-volume --size %d --availability-zone %s | grep VolumeId"%(VOLUME_SIZE,AVA_ZONE)
    time.sleep(10)
    out = commands.getstatusoutput(command)
    VOLUME_ID=INSTANCE_ID = out[1][-15:-3]

#================================
#attach volume to running instance
#===============================
def attach():
    command="aws ec2 attach-volume --volume-id %s --instance-id %s --device %s"%(VOLUME_ID,EC2_INSTANCE_ID,MOUNT_DEV_LOCATION)
    out = commands.getstatusoutput(command)

#===============================
#mount dir to instance
#===============================
def mountvolume():
   if(MOUNT_DIR_LOCATION == '')
       command = "ssh -i %s %s@%s \"sudo mkfs -t ext3 %s && mkdir /mnt/data-store && mount %s %s && exit\" "%($KEYPAIR_LOCATION, $INSTANCE_LOGIN_USR, $EC2_HOST, $MOUNT_DEV_LOCATION, $MOUNT_DEV_LOCATION, $MOUNT_DIR_LOCATION)
   else
       command = "ssh -i %s %s@%s \"sudo mkfs -t ext3 %s && mount %s %s && exit\" "%($KEYPAIR_LOCATION, $INSTANCE_LOGIN_USR, $EC2_HOST, $MOUNT_DEV_LOCATION, $MOUNT_DEV_LOCATION, $MOUNT_DIR_LOCATION)


#================
#Delete security group
# TODO: handle groupname
#================
def delsecuritygroup(groupname = 'ec2backup-security-group'):
    deletegroupcommand = '''aws ec2 delete-security-group --group-name ec2backup-security-group'''
    out = commands.getstatusoutput(deletegroupcommand)
    print out


#=============
#
#=============
def main(argv):
    method='dd'
    volumeid = ''
    directory = ''
    #================
    #Parse Argument
    #================
    try:
        opts, args = getopt.getopt(argv,"hm:v:",["method=","volumeid="])
    except getopt.GetoptError:
        usage()
    for opt,arg in opts:
        if opt == '-h':
            usage()
        elif opt in ("-m", "--method"):
            if(arg!='dd' and arg!='rsync'):
                print "Error: Unknow methods:",arg
                usage()
            method = arg
        elif opt in ("-v", "--volumeid"):
            VOLUME_ID = arg
            volumeid = arg

    if(len(args)==1):
        directory = args[0]
    else:
        print "Error: Need one directory"
        usage()
    
    #==================
    #
    #==================
    print "methods=", method
    print "volumeid=", volumeid
    print "Directory=", directory
    print "full path=", full_path(directory)
    print "path exist=", checkdir(directory)

    VERBOSE = len(os.environ.get('EC2_BACKUP_VERBOSE'))    
    if(checkdir(directory) == False):
        print 'Error: directory not exist'
    SOURCE_DIR = full_path(directory)
    SOURCE_DIR_SIZE = getdirsize(SOURCE_DIR)
    calculate()#calculate VOL size 
    
    print 'info: lanuchec2'
    lanuchec2()
    #dobackup()
    #clean()#delkey delgroup shutdown instances

if __name__ == "__main__":
    main(sys.argv[1:])
